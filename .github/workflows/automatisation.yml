name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_AZURE }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 104.40.186.8 >> ~/.ssh/known_hosts
        echo -e "Host *\n StrictHostKeyChecking no\n UserKnownHostsFile=/dev/null" >> ~/.ssh/config
    
    - name: Deploy to server
      run: |
        ssh Kuybi@104.40.186.8 "
          cd /var/www/kuybi-test/GroupeWeb
          
          # Pull latest changes
          git config --global --add safe.directory /var/www/kuybi-test/GroupeWeb
          git fetch --all
          git reset --hard origin/main
          
          # Create .env file using the existing .env.example template
          if [ -f .env ]; then
            rm .env
            echo ".env file removed"
          fi
          
          # Copy the example template
          if [ -f .env.example ]; then
            cp .env.example .env
            echo "Using .env.example as template"
            
            # Replace the values with our secrets
            sed -i "s/DB_HOST=.*/DB_HOST=\"${{ secrets.DB_HOST }}\"/g" .env
            sed -i "s/DB_NAME=.*/DB_NAME=\"${{ secrets.DB_NAME }}\"/g" .env
            sed -i "s/DB_USER=.*/DB_USER=\"${{ secrets.DB_USER }}\"/g" .env
            sed -i "s/DB_PASS=.*/DB_PASS=\"${{ secrets.DB_PASS }}\"/g" .env
            sed -i "s/UPLOAD_PATH=.*/UPLOAD_PATH=\"uploads\"/g" .env
            
            # Display .env content (for debugging)
            echo "Content of .env file:"
          else
            echo "Error: .env.example not found!"
            exit 1
          fi
          
          # Install dependencies
          composer install --no-interaction --no-dev --optimize-autoloader
          
          # Clear cache if necessary (for frameworks like Laravel)
          if [ -f artisan ]; then
            php artisan cache:clear
            php artisan config:cache
          fi
          
          # Set appropriate permissions
          find . -type d -exec chmod 755 {} \;
          find . -type f -exec chmod 644 {} \;
          
          # Make sure upload directory exists and is writable
          mkdir -p uploads
          chmod -R 775 uploads
          
          # Restart Apache
          sudo systemctl restart apache2
          
          echo 'Deployment completed successfully'
        "
